[
  {
    "objectID": "constrained_decoding/index.html#defining-a-data-schema",
    "href": "constrained_decoding/index.html#defining-a-data-schema",
    "title": "Constrained generation to guarantee syntactic correctness",
    "section": "Defining a data schema",
    "text": "Defining a data schema\nFor most constrained generation tasks, we need to define a data schema in a programmatic way. The most common way to do so is to use pydantic data classes. Here is an example of a simple data schema for a recipe:\nfrom pydantic import BaseModel\n\nclass Recipe(BaseModel):\n    title: str\n    ingredients: List[str]\n    instructions: List[str]\nThis schema can also be extended to include descriptions of different fields or to only allow certain values for specific fields. For example, we could add a field for the number of servings and only allow positive integers.\nfrom pydantic import BaseModel, Field\nfrom typing import Literal, List\n\nclass Recipe(BaseModel):\n    title: str\n    ingredients: List[str]\n    instructions: List[str]\n    servings: int = Field(..., gt=0, description=\"The number of servings for this recipe\")\n    rating: Literal[\"easy\", \"medium\", \"hard\"] = Field(\"easy\", description=\"The difficulty level of this recipe\")\nIf we want to extract copolymerization reactions a data schema could look like the following.\nWe can now use instructor to “patch” the OpenAI API client to ensure that our output fulfils the schema.\n\nclient = instructor.patch(OpenAI(), mode=instructor.Mode.MD_JSON)\n\n\nclass Monomer(BaseModel):\n    name: str = Field(..., title=\"Name\", description=\"Name of the monomer.\")\n    reactivity_constant: Optional[float] = Field(\n        None,\n        title=\"Reactivity constant\",\n        description=\"Reactivity constant of the monomer. r1 for monomer 1 and r2 for monomer 2. Must be greater or equal 0.\",\n        ge=0,\n    )\n    reactivity_constant_error: Optional[float] = Field(\n        None,\n        title=\"Reactivity constant error\",\n        description=\"Error in the reactivity constant. Often indicated with +/-. Must be greater or equal 0\",\n        ge=0,\n    )\n    q_parameter: Optional[float] = Field(\n        None,\n        title=\"Q parameter\",\n        description=\"Q parameter of the monomer. Q1 for monomer 1 and Q2 for monomer 2. Must be greater or equal 0\",\n        ge=0,\n    )\n    e_parameter: Optional[float] = Field(\n        None,\n        title=\"e parameter\",\n        description=\"e parameter of the monomer. e1 for monomer 1 and e2 for monomer 2.\",\n    )\n\n\nclass CopolymerizationReaction(BaseModel):\n    temperature: Optional[float] = Field(\n        ...,\n        title=\"Temperature\",\n        description=\"Temperature at which the reaction is carried out\",\n    )\n    temperature_unit: Optional[Literal[\"C\", \"K\"]] = Field(\n        ..., title=\"Temperature unit\", description=\"Unit of temperature\"\n    )\n    solvent: Optional[str] = Field(\n        None,\n        title=\"Solvent\",\n        description=\"Solvent used in the reaction. If bulk polymerization was performed, this field should be left empty\",\n    )\n    initiator: Optional[str] = Field(\n        None, title=\"Initiator\", description=\"Initiator used in the reaction\"\n    )\n    monomers: Optional[List[Monomer]] = Field(\n        ...,\n        title=\"Monomers\",\n        description=\"Monomers used in the reaction. Ensure that the reactivity ratios are not confused with other numbers (such as Q and e). The two monomers MUST be used in the same reaction and mentioned in the same context.\",\n        min_items=2,\n        max_items=2,\n    )\n    polymerization_type: Optional[str] = Field(\n        ...,\n        title=\"Polymerization type\",\n        description=\"Type of polymerization (e.g., bulk, solution, suspension, emulsion)\",\n    )\n    determination_method: Optional[str] = Field(\n        ...,\n        title=\"Determination method\",\n        description=\"Method used to determine the reactivity ratios (e.g. Kelen Tudor, Fineman-Ross, Mayo-Lewis).\",\n    )\n       \n\n\ndiagram = erd.create(CopolymerizationReaction)\ndiagram.draw(\"diagram.svg\")\nSVG(\"diagram.svg\")\n\n\n\n\nIn this case, we will use PDF files in the form as images as input for the model. To perform this conversion, we import some utilities.\n\nfrom pdf2image import convert_from_path\nfrom utils import process_image, get_prompt_vision_model\n\nThe code below only converts each page of the PDF into an image and then generates dictionary objects in a format that can be used by the OpenAI API.\n\nfilepath = 'paper01.pdf'\npdf_images = convert_from_path(filepath)\n\nimages_base64 = [process_image(image, 2048, 'images', filepath, j)[0] for j, image in enumerate(pdf_images)]\nimages = get_prompt_vision_model(images_base64=images_base64)\n\nArmed with the images, we can now use the OpenAI API to extract the text from the images. For this, we just call the API with our prompts and the images.\n\ncompletion = client.chat.completions.create(\n    model=\"gpt-4-turbo\",\n    response_model=List[CopolymerizationReaction],\n    max_retries=2,\n    messages=[\n        {\n            \"role\": \"system\",\n            \"content\": \"\"\"You are a scientific assistant, extracting accurate information about co-polymerization reactions from scientific papers.\nDo not use data that was reproduced from other sources.\nIf you confuse the reactivity ratios with other numbers, you will be penalized.\nMonomer names might be quite similar, if you confuse them, you will be penalized.\nNEVER combine data from different reactions, otherwise you will be penalized.\nIf you are unsure, return no data. Quality is more important than quantity.\n\"\"\",\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"\"\"Extract the data from the paper into the provided data schema. We want an iterable of reaction objects and each reaction will be its own object. You can find each page of the paper as an image below.\nThe relationship between monomers and parameters is typically indicated by subscripts that can be a number or an abbreviation of the monomer.\nNever return data that you are not absolutely sure about! You will be penalized for incorrect data.\"\"\",\n        },\n        {\"role\": \"user\", \"content\": [*images]},\n    ],\n    temperature=0,\n)\n\n\ncompletion\n\n[CopolymerizationReaction(temperature=60.0, temperature_unit='C', solvent='carbon tetrachloride', initiator='AIBN', monomers=[Monomer(name='methacrylic acid', reactivity_constant=0.54, reactivity_constant_error=0.01, q_parameter=None, e_parameter=None), Monomer(name='styrene', reactivity_constant=0.06, reactivity_constant_error=0.03, q_parameter=None, e_parameter=None)], polymerization_type='solution', determination_method='Kelen-Tudos'),\n CopolymerizationReaction(temperature=60.0, temperature_unit='C', solvent='chloroform', initiator='AIBN', monomers=[Monomer(name='methacrylic acid', reactivity_constant=0.51, reactivity_constant_error=0.01, q_parameter=None, e_parameter=None), Monomer(name='styrene', reactivity_constant=0.08, reactivity_constant_error=0.03, q_parameter=None, e_parameter=None)], polymerization_type='solution', determination_method='Kelen-Tudos'),\n CopolymerizationReaction(temperature=60.0, temperature_unit='C', solvent='acetone', initiator='AIBN', monomers=[Monomer(name='methacrylic acid', reactivity_constant=0.43, reactivity_constant_error=0.0, q_parameter=None, e_parameter=None), Monomer(name='styrene', reactivity_constant=0.65, reactivity_constant_error=0.02, q_parameter=None, e_parameter=None)], polymerization_type='solution', determination_method='Kelen-Tudos'),\n CopolymerizationReaction(temperature=60.0, temperature_unit='C', solvent='1,4-dioxane', initiator='AIBN', monomers=[Monomer(name='methacrylic acid', reactivity_constant=0.41, reactivity_constant_error=0.02, q_parameter=None, e_parameter=None), Monomer(name='styrene', reactivity_constant=0.59, reactivity_constant_error=0.05, q_parameter=None, e_parameter=None)], polymerization_type='solution', determination_method='Kelen-Tudos'),\n CopolymerizationReaction(temperature=60.0, temperature_unit='C', solvent='acetonitrile', initiator='AIBN', monomers=[Monomer(name='methacrylic acid', reactivity_constant=0.12, reactivity_constant_error=0.0, q_parameter=None, e_parameter=None), Monomer(name='styrene', reactivity_constant=0.29, reactivity_constant_error=0.0, q_parameter=None, e_parameter=None)], polymerization_type='solution', determination_method='Kelen-Tudos')]"
  },
  {
    "objectID": "ocr/nougat/nougat.html#cleaning-the-data",
    "href": "ocr/nougat/nougat.html#cleaning-the-data",
    "title": "OCR with Nougat",
    "section": "Cleaning the data",
    "text": "Cleaning the data\nFor certain applications it might be necessary to clean the data before using it for other downstream tasks."
  },
  {
    "objectID": "index.html#about-this-book",
    "href": "index.html#about-this-book",
    "title": "Generative structured data extraction using LLMs",
    "section": "About this book",
    "text": "About this book\nStructured data is at the heart of machine learning. LLMs offer a convenient way to generate structured data based on unstructured inputs. This book gives hands-on examples of the different steps in the extraction workflow using LLMs."
  }
]